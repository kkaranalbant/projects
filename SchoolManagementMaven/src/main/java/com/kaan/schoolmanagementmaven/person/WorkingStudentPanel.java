/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.kaan.schoolmanagementmaven.person;

import java.io.IOException;
import javax.swing.JOptionPane;
import com.kaan.schoolmanagementmaven.SchoolManagementGUI;
import java.sql.SQLException;
import java.util.List;
import com.kaan.schoolmanagementmaven.dataaccess.query.ExamNoteQueries;
import com.kaan.schoolmanagementmaven.dataaccess.query.IExamNoteAddingQueries;
import com.kaan.schoolmanagementmaven.dataaccess.query.ILessonFetchingQuery;
import com.kaan.schoolmanagementmaven.dataaccess.query.IPersonFetchingQueries;
import com.kaan.schoolmanagementmaven.dataaccess.query.ITeacherInformationQueries;
import com.kaan.schoolmanagementmaven.dataaccess.query.LessonFetchingQuery;
import com.kaan.schoolmanagementmaven.dataaccess.query.PersonFetchingQueries;
import com.kaan.schoolmanagementmaven.dataaccess.query.PersonInformationQuery;
import com.kaan.schoolmanagementmaven.exception.NotSufficentCreditException;
import com.kaan.schoolmanagementmaven.exception.ReachedMaximumRowNumberException;
import com.kaan.schoolmanagementmaven.factory.ILessonFactory;
import com.kaan.schoolmanagementmaven.factory.LessonFactory;
import com.kaan.schoolmanagementmaven.lesson.Lesson;

/**
 *
 * @author kaan
 *
 */
public class WorkingStudentPanel extends javax.swing.JFrame {

    private WorkingStudent workingStudent;
    private SchoolManagementGUI mainPanel;
    private ILessonFetchingQuery lessonFetchingQuery;
    private IPersonFetchingQueries personFetcher;
    private ILessonFactory lessonFactory;
    private ITeacherInformationQueries teacherInfo;
    private IExamNoteAddingQueries examTableAdder;

    /**
     * Creates new form WorkingStudentPanel
     */
    public WorkingStudentPanel(SchoolManagementGUI mainPanel, WorkingStudent workingStudent) throws SQLException {
        initComponents();
        this.mainPanel = mainPanel;
        this.workingStudent = workingStudent;
        lessonListForAdding.removeAllItems();
        lessonListForRemove.removeAllItems();
        lessonFetchingQuery = LessonFetchingQuery.getInstance();
        personFetcher = PersonFetchingQueries.getInstance();
        teacherInfo = PersonInformationQuery.getInstanceForTeacher();
        examTableAdder = ExamNoteQueries.getInstanceForAddingQueries();
        List<String> allLessonNames = lessonFetchingQuery.getAllLessonNames();
        int uid = personFetcher.getPersonUIDByNameAndLastname(workingStudent.getName(), workingStudent.getLastName());
        List<String> studentLessonList = lessonFetchingQuery.getWorkingStudentLessonNames(uid);
        for (String currentLessonName : allLessonNames) {
            if (studentLessonList.contains(currentLessonName)) {
                lessonListForRemove.addItem(currentLessonName);
            } else {
                lessonListForAdding.addItem(currentLessonName);
            }
        }
        this.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosed(java.awt.event.WindowEvent windowEvent) {
                mainPanel.setVisible(true); // İkinci JFrame kapatıldığında ilk JFrame'i görünür yap
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        dontWork = new javax.swing.JButton();
        lessonListForAdding = new javax.swing.JComboBox<>();
        lessonListForRemove = new javax.swing.JComboBox<>();
        addLessonButton = new javax.swing.JButton();
        removeLessonButton = new javax.swing.JButton();
        teacherList = new javax.swing.JComboBox<>();
        accountSettingsButton = new javax.swing.JButton();
        examInfoButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Working Student Panel");

        dontWork.setText("Do not work anymore");
        dontWork.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dontWorkActionPerformed(evt);
            }
        });

        lessonListForAdding.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        lessonListForAdding.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                lessonListForAddingItemStateChanged(evt);
            }
        });

        lessonListForRemove.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        addLessonButton.setText("Add");
        addLessonButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addLessonButtonActionPerformed(evt);
            }
        });

        removeLessonButton.setText("Remove");
        removeLessonButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeLessonButtonActionPerformed(evt);
            }
        });

        teacherList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        accountSettingsButton.setText("Account Settings");
        accountSettingsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accountSettingsButtonActionPerformed(evt);
            }
        });

        examInfoButton.setText("Show Exam Informations");
        examInfoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                examInfoButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(149, 149, 149)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(121, 121, 121)
                        .addComponent(examInfoButton)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lessonListForRemove, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lessonListForAdding, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addComponent(teacherList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addLessonButton, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(removeLessonButton)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(146, 146, 146)
                        .addComponent(accountSettingsButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(130, 130, 130)
                        .addComponent(dontWork)))
                .addContainerGap(71, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel1)
                .addGap(30, 30, 30)
                .addComponent(examInfoButton)
                .addGap(30, 30, 30)
                .addComponent(dontWork)
                .addGap(36, 36, 36)
                .addComponent(accountSettingsButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lessonListForAdding, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(teacherList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addLessonButton))
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lessonListForRemove, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(removeLessonButton))
                .addGap(25, 25, 25))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void dontWorkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dontWorkActionPerformed
        try {
            String name = workingStudent.getName();
            String lastName = workingStudent.getLastName();
            int oldStudentUID = personFetcher.getPersonUIDByNameAndLastname(name, lastName);

            workingStudent.beNormalStudent();
            JOptionPane.showMessageDialog(null, "Successful.");
            int newUID = personFetcher.getPersonUIDByNameAndLastname(name, lastName);
            if (WorkingStudent.getLogManager() != null) {
                WorkingStudent.getLogManager().saveMessage(oldStudentUID + " UID numbered working student converted to normal student . New UID number : " + newUID);
            }
            mainPanel.setVisible(true);
            workingStudent = null;
            this.dispose();
        } catch (SQLException | IOException | ReachedMaximumRowNumberException ex) {
            ex.printStackTrace();
            JOptionPane.showConfirmDialog(null, ex.getMessage());
        }
    }//GEN-LAST:event_dontWorkActionPerformed

    private void lessonListForAddingItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_lessonListForAddingItemStateChanged
        teacherList.removeAllItems();
        if (lessonListForAdding.getSelectedItem() != null) {
            try {
                lessonFetchingQuery = LessonFetchingQuery.getInstance();
                teacherInfo = PersonInformationQuery.getInstanceForTeacher();
                int branchUID = lessonFetchingQuery.getLessonUIDByLessonName((String) lessonListForAdding.getSelectedItem());
                List<String> teacherNameList = teacherInfo.getAllTeacherNameWith(branchUID);
                List<String> teacherLastnameList = teacherInfo.getAllTeacherLastnameWith(branchUID);
                for (int i = 0; i < teacherNameList.size(); i++) {
                    teacherList.addItem(teacherNameList.get(i) + " " + teacherLastnameList.get(i));
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_lessonListForAddingItemStateChanged

    private void addLessonButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addLessonButtonActionPerformed
        if (lessonListForAdding.getSelectedItem() == null) {
            return;
        }
        try {
            lessonFactory = LessonFactory.getInstance();
            int lessonIndex = lessonListForAdding.getSelectedIndex();
            String name = (String) lessonListForAdding.getSelectedItem();
            int lessonUID = lessonFetchingQuery.getLessonUIDByLessonName(name);
            Lesson lesson = lessonFactory.createLessonWhichExistInDb(lessonUID);
            if (teacherList.getSelectedItem() == null) {
                JOptionPane.showMessageDialog(null, "You cant choose this lesson.");
                return;
            }
            String teacherNameAndLastname = (String) teacherList.getSelectedItem();
            String[] nameAndLastname = teacherNameAndLastname.split(" ");
            int teacherUID = personFetcher.getPersonUIDByNameAndLastname(nameAndLastname[0], nameAndLastname[1]);
            workingStudent.addLesson(lesson, teacherUID);
            int studentUID = personFetcher.getPersonUIDByNameAndLastname(workingStudent.getName(), workingStudent.getLastName());
            lessonListForAdding.removeItemAt(lessonIndex);
            lessonListForRemove.addItem(name);
            JOptionPane.showMessageDialog(null, "Successful.");
            if (WorkingStudent.getLogManager() != null) {
                WorkingStudent.getLogManager().saveMessage(studentUID + " UID numbered student added " + lessonUID + " UID numbered lesson.");
            }
        } catch (SQLException | IOException ex) {
            if (ex instanceof IOException) {
                JOptionPane.showMessageDialog(null, "An error occured while writing to log file.");
            } else {
                ex.printStackTrace();
            }
        } catch (NotSufficentCreditException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
    }//GEN-LAST:event_addLessonButtonActionPerformed

    private void removeLessonButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeLessonButtonActionPerformed
        if (lessonListForRemove.getSelectedItem() == null) {
            return;
        }
        try {
            lessonFactory = LessonFactory.getInstance();
            int lessonIndex = lessonListForRemove.getSelectedIndex();
            String name = (String) lessonListForRemove.getSelectedItem();
            int lessonUID = lessonFetchingQuery.getLessonUIDByLessonName(name);
            Lesson lesson = lessonFactory.createLessonWhichExistInDb(lessonUID);
            workingStudent.removeLesson(lesson);
            lessonListForRemove.removeItemAt(lessonIndex);
            lessonListForAdding.addItem(name);
            JOptionPane.showMessageDialog(null, "Successful.");
            int studentUID = personFetcher.getPersonUIDByNameAndLastname(workingStudent.getName(), workingStudent.getLastName());
            if (WorkingStudent.getLogManager() != null) {
                WorkingStudent.getLogManager().saveMessage(studentUID + " UID numbered student removed " + lessonUID + " UID numbered lesson.");
            }
        } catch (SQLException | IOException ex) {
            if (ex instanceof IOException) {
                JOptionPane.showMessageDialog(null, "An error occured while writing to log file.");
            } else {
                ex.printStackTrace();
            }
        } catch (NotSufficentCreditException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
    }//GEN-LAST:event_removeLessonButtonActionPerformed

    private void accountSettingsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accountSettingsButtonActionPerformed
        try {
            new WorkingStudentAccountSettingsPanel(workingStudent, this).setVisible(true);;
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_accountSettingsButtonActionPerformed

    private void examInfoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_examInfoButtonActionPerformed
        try {
            JOptionPane.showMessageDialog(null, workingStudent.showExamInfo());
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_examInfoButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WorkingStudentPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WorkingStudentPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WorkingStudentPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WorkingStudentPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton accountSettingsButton;
    private javax.swing.JButton addLessonButton;
    private javax.swing.JButton dontWork;
    private javax.swing.JButton examInfoButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JComboBox<String> lessonListForAdding;
    private javax.swing.JComboBox<String> lessonListForRemove;
    private javax.swing.JButton removeLessonButton;
    private javax.swing.JComboBox<String> teacherList;
    // End of variables declaration//GEN-END:variables
}
